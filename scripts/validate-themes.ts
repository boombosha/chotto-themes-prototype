#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

/**
 * –°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–º –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ chotto-themes-prototype
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º --chotto-theme
 */

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const THEMES_DIR = path.join(__dirname, '..', 'src', 'themes');
const PREFIX = '--chotto-theme';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
} as const;

type Color = keyof typeof colors;

interface CSSVariable {
  name: string;
  value: string;
  line: number;
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏
 */
function log(message: string, color: Color = 'reset'): void {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
 */
function extractCSSVariables(filePath: string): Map<string, CSSVariable> {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const variables = new Map<string, CSSVariable>();
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
    const lines = content.split('\n');
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–º–∏—Å—è —Å --chotto-theme
      if (line.startsWith('--chotto-theme-') && line.includes(':')) {
        const colonIndex = line.indexOf(':');
        if (colonIndex > 0) {
          const varName = line.substring(0, colonIndex).trim();
          const varValue = line.substring(colonIndex + 1).replace(/;$/, '').trim();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
          if (varName && varName.startsWith('--chotto-theme-') && varName.length > '--chotto-theme-'.length) {
            variables.set(varName, {
              name: varName,
              value: varValue,
              line: i + 1
            });
          }
        }
      }
    }
    
    return variables;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}: ${(error as Error).message}`, 'red');
    return new Map();
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
 */
function validateCSSValue(value: string): string[] {
  const errors: string[] = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (!value || value.trim() === '') {
    errors.push('–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
    return errors;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
  if (value.includes('undefined') || value.includes('null')) {
    errors.push('–°–æ–¥–µ—Ä–∂–∏—Ç undefined –∏–ª–∏ null');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å var() —Ñ—É–Ω–∫—Ü–∏–π
  const varRegex = /var\(--[a-zA-Z0-9-]+\)/g;
  const varMatches = value.match(varRegex);
  if (varMatches) {
    for (const varMatch of varMatches) {
      const varName = varMatch.slice(4, -1); // –£–±–∏—Ä–∞–µ–º var( –∏ )
      if (!varName.startsWith('--') && 
          !varName.startsWith('chotto-theme-') && 
          !varName.startsWith('emerald-') && 
          !varName.startsWith('neutral-') && 
          !varName.startsWith('p-red-') && 
          !varName.startsWith('azure-') && 
          !varName.startsWith('p-coral-') && 
          !varName.startsWith('default-')) {
        errors.push(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: ${varName}`);
      }
    }
  }
  
  return errors;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ–º
 */
function getThemes(): string[] {
  try {
    const themes = fs.readdirSync(THEMES_DIR, { withFileTypes: true })
      .filter(dirent => dirent.isDirectory())
      .map(dirent => dirent.name);
    
    return themes;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–º: ${(error as Error).message}`, 'red');
    return [];
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateThemes(): boolean {
  log('üé® –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–º chotto-themes-prototype', 'cyan');
  log('=' .repeat(50), 'cyan');
  
  const themes = getThemes();
  if (themes.length === 0) {
    log('‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'red');
    return false;
  }
  
  log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ç–µ–º: ${themes.length}`, 'green');
  themes.forEach(theme => log(`   - ${theme}`, 'blue'));
  log('');
  
  // –°–±–æ—Ä –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Ç–µ–º
  const allVariables = new Map<string, Map<string, CSSVariable>>(); // themeName -> variables
  const globalVariableSet = new Set<string>(); // –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  
  for (const theme of themes) {
    const varsPath = path.join(THEMES_DIR, theme, 'vars.scss');
    const variables = extractCSSVariables(varsPath);
    allVariables.set(theme, variables);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä
    for (const [varName] of variables) {
      if (varName && varName.trim() !== '') {
        globalVariableSet.add(varName);
      }
    }
    
    log(`üìã –¢–µ–º–∞ "${theme}": ${variables.size} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö`, 'blue');
  }
  
  log('');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  let hasErrors = false;
  let totalErrors = 0;
  let totalWarnings = 0;
  
  log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...', 'yellow');
  log('');
  
  for (const varName of globalVariableSet) {
    const themeUsage = new Map<string, CSSVariable>();
    
    // –°–æ–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤–æ –≤—Å–µ—Ö —Ç–µ–º–∞—Ö
    for (const [theme, variables] of allVariables) {
      if (variables.has(varName)) {
        const variable = variables.get(varName)!;
        themeUsage.set(theme, variable);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Ç–µ–º–∞—Ö
    const missingThemes = themes.filter(theme => !themeUsage.has(theme));
    if (missingThemes.length > 0) {
      log(`‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${varName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–º–∞—Ö: ${missingThemes.join(', ')}`, 'red');
      hasErrors = true;
      totalErrors++;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    for (const [theme, variable] of themeUsage) {
      const syntaxErrors = validateCSSValue(variable.value);
      if (syntaxErrors.length > 0) {
        log(`‚ùå ${theme}: ${varName} (—Å—Ç—Ä–æ–∫–∞ ${variable.line}) - ${syntaxErrors.join(', ')}`, 'red');
        hasErrors = true;
        totalErrors++;
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π —Ç–µ–º–µ)
  log('');
  log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ...', 'yellow');
  
  for (const [theme, variables] of allVariables) {
    for (const [varName] of variables) {
      const usageCount = Array.from(allVariables.values())
        .filter(themeVars => themeVars.has(varName)).length;
      
      if (usageCount === 1) {
        log(`‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${varName} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–µ "${theme}"`, 'yellow');
        totalWarnings++;
      }
    }
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  log('');
  log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', 'cyan');
  log(`   –í—Å–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${globalVariableSet.size}`, 'blue');
  log(`   –û—à–∏–±–æ–∫: ${totalErrors}`, totalErrors > 0 ? 'red' : 'green');
  log(`   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${totalWarnings}`, totalWarnings > 0 ? 'yellow' : 'green');
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º
  log('');
  log('üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º:', 'cyan');
  for (const [theme, variables] of allVariables) {
    const missingCount = globalVariableSet.size - variables.size;
    const status = missingCount === 0 ? '‚úÖ' : '‚ùå';
    log(`   ${status} ${theme}: ${variables.size}/${globalVariableSet.size} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö`, 
        missingCount === 0 ? 'green' : 'red');
    
    if (missingCount > 0) {
      const missing = Array.from(globalVariableSet).filter(varName => !variables.has(varName));
      log(`      –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missing.slice(0, 3).join(', ')}${missing.length > 3 ? '...' : ''}`, 'red');
    }
  }
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç
  log('');
  if (hasErrors) {
    log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏', 'red');
    return false;
  } else {
    log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'green');
    if (totalWarnings > 0) {
      log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${totalWarnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`, 'yellow');
    }
    return true;
  }
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const success = validateThemes();
process.exit(success ? 0 : 1);

export { validateThemes, extractCSSVariables, validateCSSValue };
