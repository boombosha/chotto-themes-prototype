#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–º –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ chotto-themes-prototype
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º --chotto-theme
 */

const THEMES_DIR = path.join(__dirname, '..', 'src', 'themes');
const PREFIX = '--chotto-theme';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏
 */
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ SCSS —Ñ–∞–π–ª–∞
 */
function extractCSSVariablesFromSCSS(filePath) {
  const content = fs.readFileSync(filePath, 'utf-8');
  const variables = {};
  
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const variableRegex = /--chotto-theme-([^:]+):\s*([^;]+);/g;
  let match;
  
  while ((match = variableRegex.exec(content)) !== null) {
    const variableName = `--chotto-theme-${match[1]}`;
    const variableValue = match[2].trim();
    variables[variableName] = variableValue;
  }
  
  return variables;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã –∏–∑ SCSS —Ñ–∞–π–ª–∞
 */
function extractColorPaletteFromSCSS(filePath) {
  const content = fs.readFileSync(filePath, 'utf-8');
  const variables = {};
  
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const colorRegex = /--(azure|emerald|neutral|p-red|p-coral|default)-([a-zA-Z0-9-]+):\s*([^;]+);/g;
  let match;
  
  while ((match = colorRegex.exec(content)) !== null) {
    const variableName = `--${match[1]}-${match[2]}`;
    const variableValue = match[3].trim();
    variables[variableName] = variableValue;
  }
  
  return variables;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function getExpectedThemeVariables() {
  const typesPath = path.join(__dirname, '..', 'src', 'themes', 'types.ts');
  
  if (!fs.existsSync(typesPath)) {
    return [];
  }
  
  const content = fs.readFileSync(typesPath, 'utf-8');
  const interfaceRegex = /export interface ChottoThemeVariables\s*{([^}]+)}/s;
  const match = content.match(interfaceRegex);
  
  if (!match) {
    return [];
  }
  
  const interfaceContent = match[1];
  const variables = [];
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const variableRegex = /'([^']+)':\s*(string|number|string\s*\|\s*number);/g;
  let varMatch;
  
  while ((varMatch = variableRegex.exec(interfaceContent)) !== null) {
    variables.push(varMatch[1]);
  }
  
  return variables;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function getExpectedColorPaletteVariables() {
  const typesPath = path.join(__dirname, '..', 'src', 'themes', 'types.ts');
  
  if (!fs.existsSync(typesPath)) {
    return [];
  }
  
  const content = fs.readFileSync(typesPath, 'utf-8');
  const interfaceRegex = /export interface ChottoColorPalette\s*{([^}]+)}/s;
  const match = content.match(interfaceRegex);
  
  if (!match) {
    return [];
  }
  
  const interfaceContent = match[1];
  const variables = [];
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const variableRegex = /'([^']+)':\s*(string|number|string\s*\|\s*number);/g;
  let varMatch;
  
  while ((varMatch = variableRegex.exec(interfaceContent)) !== null) {
    variables.push(varMatch[1]);
  }
  
  return variables;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
 */
function validateThemeInterface(themeName, themePath, expectedVariables) {
  const actualVariables = extractCSSVariablesFromSCSS(themePath);
  const actualVariableNames = Object.keys(actualVariables);
  
  const missingVariables = expectedVariables.filter(
    expected => !actualVariableNames.includes(expected)
  );
  
  const extraVariables = actualVariableNames.filter(
    actual => !expectedVariables.includes(actual)
  );
  
  const isValid = missingVariables.length === 0 && extraVariables.length === 0;
  const errors = [];
  
  if (missingVariables.length > 0) {
    errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missingVariables.join(', ')}`);
  }
  
  if (extraVariables.length > 0) {
    errors.push(`–õ–∏—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${extraVariables.join(', ')}`);
  }
  
  return {
    theme: themeName,
    isValid,
    errors,
    missingVariables,
    extraVariables
  };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
 */
function validateCSSVariablePrefixes(themeName, themePath) {
  const content = fs.readFileSync(themePath, 'utf-8');
  
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const variableRegex = /--chotto-theme-([a-zA-Z0-9-]+):/g;
  const expectedPrefix = '--chotto-theme-';
  const invalidPrefixes = [];
  let match;
  
  while ((match = variableRegex.exec(content)) !== null) {
    const fullVariableName = `--chotto-theme-${match[1]}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if (!fullVariableName.startsWith(expectedPrefix)) {
      invalidPrefixes.push(fullVariableName);
    }
  }
  
  const isValid = invalidPrefixes.length === 0;
  const errors = [];
  
  if (invalidPrefixes.length > 0) {
    errors.push(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã: ${invalidPrefixes.join(', ')}`);
  }
  
  return {
    theme: themeName,
    isValid,
    errors,
    invalidPrefixes
  };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
 */
function validateCSSSyntax(themeName, themePath) {
  const content = fs.readFileSync(themePath, 'utf-8');
  const lines = content.split('\n');
  const syntaxErrors = [];
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    
    if (line.startsWith('--chotto-theme-') && line.includes(':')) {
      const colonIndex = line.indexOf(':');
      if (colonIndex > 0) {
        const varName = line.substring(0, colonIndex).trim();
        const varValue = line.substring(colonIndex + 1).replace(/;$/, '').trim();
        
        const errors = validateCSSValue(varValue);
        if (errors.length > 0) {
          syntaxErrors.push({
            variable: varName,
            error: errors.join(', '),
            line: i + 1
          });
        }
      }
    }
  }
  
  const isValid = syntaxErrors.length === 0;
  const errors = [];
  
  if (syntaxErrors.length > 0) {
    errors.push(`–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: ${syntaxErrors.length} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö`);
  }
  
  return {
    theme: themeName,
    isValid,
    errors,
    syntaxErrors
  };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã
 */
function validateColorPalette(themeName, themePath, expectedColors) {
  const actualColors = extractColorPaletteFromSCSS(themePath);
  const actualColorNames = Object.keys(actualColors);
  
  const missingColors = expectedColors.filter(
    expected => !actualColorNames.includes(expected)
  );
  
  const extraColors = actualColorNames.filter(
    actual => !expectedColors.includes(actual)
  );
  
  const isValid = missingColors.length === 0 && extraColors.length === 0;
  const errors = [];
  
  if (missingColors.length > 0) {
    errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–≤–µ—Ç–∞: ${missingColors.join(', ')}`);
  }
  
  if (extraColors.length > 0) {
    errors.push(`–õ–∏—à–Ω–∏–µ —Ü–≤–µ—Ç–∞: ${extraColors.join(', ')}`);
  }
  
  return {
    theme: themeName,
    isValid,
    errors,
    missingColors,
    extraColors
  };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
 */
function validateCSSValue(value) {
  const errors = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (!value || value.trim() === '') {
    errors.push('–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
    return errors;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
  if (value.includes('undefined') || value.includes('null')) {
    errors.push('–°–æ–¥–µ—Ä–∂–∏—Ç undefined –∏–ª–∏ null');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å var() —Ñ—É–Ω–∫—Ü–∏–π
  const varRegex = /var\(--[a-zA-Z0-9-]+\)/g;
  const varMatches = value.match(varRegex);
  if (varMatches) {
    for (const varMatch of varMatches) {
      const varName = varMatch.slice(4, -1); // –£–±–∏—Ä–∞–µ–º var( –∏ )
      if (!varName.startsWith('--') && 
          !varName.startsWith('chotto-theme-') && 
          !varName.startsWith('emerald-') && 
          !varName.startsWith('neutral-') && 
          !varName.startsWith('p-red-') && 
          !varName.startsWith('azure-') && 
          !varName.startsWith('p-coral-') && 
          !varName.startsWith('default-')) {
        errors.push(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: ${varName}`);
      }
    }
  }
  
  return errors;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ–º
 */
function getThemes() {
  try {
    const themes = fs.readdirSync(THEMES_DIR, { withFileTypes: true })
      .filter(dirent => dirent.isDirectory())
      .map(dirent => dirent.name);
    
    return themes;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–º: ${error.message}`, 'red');
    return [];
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
async function validateAllThemes() {
  log('üîç –ù–∞—á–∏–Ω–∞—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–µ–º chotto-themes-prototype...', 'cyan');
  log('');
  
  const themes = getThemes();
  if (themes.length === 0) {
    log('‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'red');
    process.exit(1);
  }
  
  log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ç–µ–º: ${themes.length}`, 'green');
  themes.forEach(theme => log(`   - ${theme}`, 'blue'));
  log('');
  
  // –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
  const expectedThemeVariables = getExpectedThemeVariables();
  const expectedColorVariables = getExpectedColorPaletteVariables();
  
  log(`üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:`, 'yellow');
  log(`   –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–º—ã: ${expectedThemeVariables.length}`, 'blue');
  log(`   –ù–∞–π–¥–µ–Ω–æ —Ü–≤–µ—Ç–æ–≤: ${expectedColorVariables.length}`, 'blue');
  log(`   –ü–µ—Ä–≤—ã–µ 5 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${expectedThemeVariables.slice(0, 5).join(', ')}`, 'blue');
  log(`   Font-weight –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${expectedThemeVariables.filter(v => v.includes('font-weight')).join(', ')}`, 'blue');
  log('');
  
  if (expectedThemeVariables.length === 0) {
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ChottoThemeVariables', 'red');
    process.exit(1);
  }
  
  if (expectedColorVariables.length === 0) {
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ChottoColorPalette', 'red');
    process.exit(1);
  }
  
  // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const interfaceResults = [];
  const prefixResults = [];
  const syntaxResults = [];
  const colorPaletteResults = [];
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
  for (const theme of themes) {
    const varsPath = path.join(THEMES_DIR, theme, 'vars.scss');
    
    if (!fs.existsSync(varsPath)) {
      log(`‚ö†Ô∏è  –¢–µ–º–∞ ${theme}: —Ñ–∞–π–ª vars.scss –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
      continue;
    }
    
    log(`üìã –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–º—É: ${theme}`);
    log(`   –û–∂–∏–¥–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã: ${expectedThemeVariables.length}`);
    log(`   –û–∂–∏–¥–∞–µ–º—ã–µ —Ü–≤–µ—Ç–∞: ${expectedColorVariables.length}`);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è 1: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    const interfaceResult = validateThemeInterface(theme, varsPath, expectedThemeVariables);
    interfaceResults.push(interfaceResult);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è 2: –ü—Ä–µ—Ñ–∏–∫—Å—ã CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const prefixResult = validateCSSVariablePrefixes(theme, varsPath);
    prefixResults.push(prefixResult);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è 3: –°–∏–Ω—Ç–∞–∫—Å–∏—Å CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const syntaxResult = validateCSSSyntax(theme, varsPath);
    syntaxResults.push(syntaxResult);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è 4: –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
    const colorPaletteResult = validateColorPalette(theme, varsPath, expectedColorVariables);
    colorPaletteResults.push(colorPaletteResult);
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
    if (interfaceResult.isValid && prefixResult.isValid && syntaxResult.isValid && colorPaletteResult.isValid) {
      log(`   ‚úÖ ${theme}: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å OK, –ø—Ä–µ—Ñ–∏–∫—Å—ã OK, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å OK, —Ü–≤–µ—Ç–∞ OK`, 'green');
    } else {
      const allErrors = [...interfaceResult.errors, ...prefixResult.errors, ...syntaxResult.errors, ...colorPaletteResult.errors];
      log(`   ‚ùå ${theme}: ${allErrors.join('; ')}`, 'red');
    }
    
    log('');
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const allResults = [...interfaceResults, ...prefixResults, ...syntaxResults, ...colorPaletteResults];
  const validResults = allResults.filter(r => r.isValid);
  const invalidResults = allResults.filter(r => !r.isValid);
  
  log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', 'cyan');
  log(`   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${themes.length} —Ç–µ–º (4 –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ç–µ–º—É)`, 'blue');
  log(`   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${validResults.length}`, 'green');
  log(`   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${invalidResults.length}`, invalidResults.length > 0 ? 'red' : 'green');
  
  if (invalidResults.length > 0) {
    log('', 'reset');
    log('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:', 'red');
    for (const result of invalidResults) {
      log(`   ${result.theme}:`, 'yellow');
      for (const error of result.errors) {
        log(`     - ${error}`, 'red');
      }
    }
    process.exit(1);
  } else {
    log('', 'reset');
    log('üéâ –í—Å–µ —Ç–µ–º—ã –≤–∞–ª–∏–¥–Ω—ã!', 'green');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
validateAllThemes().catch(error => {
  log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error}`, 'red');
  process.exit(1);
});

module.exports = { validateAllThemes, extractCSSVariablesFromSCSS, validateCSSValue };